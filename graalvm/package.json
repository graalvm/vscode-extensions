{
	"name": "graalvm",
	"displayName": "GraalVM Tools for Java",
	"description": "Support for Java, JavaScript, Python, Ruby and R on GraalVM, native image and more...",
	"version": "0.5.17",
	"preview": true,
	"license": "SEE LICENSE IN LICENSE.txt",
	"publisher": "oracle-labs-graalvm",
	"author": {
		"name": "Oracle Labs"
	},
	"icon": "images/graalvm-logo.png",
	"homepage": "https://github.com/graalvm/vscode-extensions/blob/master/graalvm/README.md",
	"repository": {
		"type": "git",
		"url": "https://github.com/graalvm/vscode-extensions.git"
	},
	"bugs": {
		"url": "https://github.com/graalvm/vscode-extensions/issues"
	},
	"engines": {
		"vscode": "^1.49.0"
	},
	"categories": [
		"Programming Languages",
		"Debuggers",
		"Snippets",
		"Other"
	],
	"keywords": [
		"java",
		"polyglot",
		"graalvm",
		"truffle",
		"native image"
	],
	"activationEvents": [
		"*"
	],
	"main": "./dist/extension",
	"contributes": {
		"configuration": {
			"type": "object",
			"title": "GraalVM",
			"properties": {
				"graalvm.home": {
					"type": "string",
					"default": "",
					"description": "Path to the active GraalVM installation.",
					"scope": "machine"

				},
				"graalvm.installations": {
					"type": "array",
					"default": [],
					"description": "Paths to GraalVM installations.",
					"scope": "machine"
				},
				"graalvm.languageServer.start": {
					"type": "string",
					"default": "none",
					"enum": [
						"none",
						"single",
						"inProcess"
					],
					"enumDescriptions": [
						"Do not start GraalVM Language Server.",
						"Start single GraalVM Language Server per IDE run.",
						"Start separate GraalVM Language Server within every processes being run or debugged."
					],
					"description": "Start GraalVM Language Server."
				},
				"graalvm.languageServer.currentWorkDir": {
					"type": "string",
					"default": "",
					"description": "Absolute path to the working directory of the GraalVM Language Server.",
					"scope": "machine"
				},
				"graalvm.languageServer.delegateServers": {
					"type": "string",
					"default": "",
					"description": "Comma-separated list of language@[host:]port where other language servers run.",
					"scope": "machine"
				},
				"graalvm.languageServer.startRLanguageServer": {
					"type": "boolean",
					"default": false,
					"description": "Start R Language Server."
				},
				"graalvm.languageServer.startRubyLanguageServer": {
					"type": "boolean",
					"default": false,
					"description": "Start Ruby Language Server."
				},
				"graalvm.systemDetect": {
					"type": "boolean",
					"default": true,
					"description": "Detect system GraalVM installations."
				},
				"graalvm.gu.config": {
					"type": "string",
					"default": "",
					"description": "Path to the custom GU configuration file.",
					"scope": "machine"
				},
				"native.buildtools.config.windows": {
					"type": "string",
					"default": "",
					"description": "Optional path to Windows Build Tools Configuration Script"
				}
			}
		},
		"commands": [
			{
				"command": "extension.graalvm.selectGraalVMHome",
				"title": "Set Active GraalVM Installation",
				"icon": "$(home)",
				"category": "GraalVM"
			},
			{
				"command": "extension.graalvm.installGraalVM",
				"title": "Download & Install GraalVM",
				"icon": "$(desktop-download)",
				"category": "GraalVM"
			},
			{
				"command": "extension.graalvm.addExistingGraalVM",
				"title": "Add Existing GraalVM",
				"icon": "$(new-folder)",
				"category": "GraalVM"
			},
			{
				"command": "extension.graalvm.refreshInstallations",
				"title": "Refresh Installations",
				"icon": "$(refresh)",
				"category": "GraalVM"
			},
			{
				"command": "extension.graalvm.installGraalVMComponent",
				"title": "Install GraalVM Component",
				"icon": "$(add)",
				"category": "GraalVM"
			},
			{
				"command": "extension.graalvm.uninstallGraalVMComponent",
				"title": "Uninstall GraalVM Component",
				"icon": "$(trash)",
				"category": "GraalVM"
			},
			{
				"command": "extension.graalvm.gds.showConfiguration",
				"title": "Show GU Configuration",
				"icon": "$(home)",
				"category": "GraalVM"
			},
			{
				"command": "extension.graalvm.addNativeImageToPOM",
				"title": "Add Maven Native Image Plugin",
				"category": "GraalVM"
			},
			{
				"command": "extension.graalvm.toggleCodeCoverage",
				"title": "Toggle Code Coverage",
				"category": "GraalVM"
			},
			{
				"command": "extension.graalvm.installRLanguageServer",
				"title": "Install R Language Server",
				"category": "GraalVM"
			},
			{
				"command": "extension.graalvm.installRubyLanguageServer",
				"title": "Install Ruby Language Server",
				"category": "GraalVM"
			},
			{
				"command": "extension.graalvm.setupProxy",
				"icon": "$(wrench)",
				"title": "Setup Proxy"
			},
			{
				"command": "extension.graalvm.removeInstallation",
				"title": "Remove GraalVM Installation",
				"icon": "$(trash)",
				"category": "GraalVM"
			},
			{
				"command": "extension.graalvm.runVisualVMForPID",
				"title": "Open Process In VisualVM",
				"icon": "$(run)",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.startVisualVM",
				"title": "Start VisualVM",
				"icon": "$(run)",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.toggleHandleProjectProcessVisualVM",
				"title": "⠀   Auto detect project process",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.toggleHandleProjectProcessVisualVM_",
				"title": "✓  Auto detect project process",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.preselectOverviewVisualVM",
				"title": "○ Preselect Overview view",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.preselectOverviewVisualVM_",
				"title": "◉ Preselect Overview view",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.preselectMonitorVisualVM",
				"title": "○ Preselect Monitor view",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.preselectMonitorVisualVM_",
				"title": "◉ Preselect Monitor view",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.preselectThreadsVisualVM",
				"title": "○ Preselect Threads view",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.preselectThreadsVisualVM_",
				"title": "◉ Preselect Threads view",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.preselectSamplerVisualVM",
				"title": "○ Preselect Sampler view",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.preselectSamplerVisualVM_",
				"title": "◉ Preselect Sampler view",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.toggleWindowToFrontVisualVM",
				"title": "⠀   Bring VisualVM window to front",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.toggleWindowToFrontVisualVM_",
				"title": "✓  Bring VisualVM window to front",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.toggleSourcesIntegrationVisualVM",
				"title": "✓  Enable Go to Source integration",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.toggleSourcesIntegrationVisualVM_",
				"title": "⠀   Enable Go to Source integration",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.selectProcessVisualVM",
				"title": "Select process",
				"icon": "$(search)",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.threadDumpVisualVM",
				"title": "Take thread dump",
				"icon": "$(record)",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.heapDumpVisualVM",
				"title": "Take heap dump",
				"icon": "$(record)",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.startCPUSamplerVisualVM",
				"title": "Start CPU sampling",
				"icon": "$(run)",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.startMemorySamplerVisualVM",
				"title": "Start memory sampling",
				"icon": "$(run)",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.snapshotSamplerVisualVM",
				"title": "Take snapshot of sampler results",
				"icon": "$(record)",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.stopSamplerVisualVM",
				"title": "Stop sampling",
				"icon": "$(stop)",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.startJFRRecordingVisualVM",
				"title": "Start flight recording",
				"icon": "$(run)",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.dumpJFRRecordingVisualVM",
				"title": "Dump flight recording data",
				"icon": "$(record)",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.stopJFRRecordingVisualVM",
				"title": "Stop flight recording",
				"icon": "$(stop)",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.configureSettingVisualVM",
				"title": "Configure",
				"icon": "$(edit)",
				"category": "VisualVM"
			},
			{
				"command": "extension.graalvm.openWindowsNITerminal",
				"title": "Open Terminal Preconfigured For Native Image",
				"icon": "$(terminal)",
				"category": "GraalVM"
			},
			{
				"command": "extension.graalvm.showDocsNativeImage",
				"title": "Documentation",
				"icon": "$(question)",
				"category": "NativeImage"
			},
			{
				"command": "extension.graalvm.configureSettingNativeImage",
				"title": "Configure",
				"icon": "$(edit)",
				"category": "NativeImage"
			},
			{
				"command": "extension.graalvm.openConfigNativeImage",
				"title": "Open Configuration Files",
				"icon": "$(go-to-file)",
				"category": "NativeImage"
			},
			{
				"command": "extension.graalvm.troubleshootNBLSThreadDump",
				"title": "Thread Dump",
				"category": "Troubleshoot Language Server"
			},
			{
				"command": "extension.graalvm.troubleshootNBLSHeapDump",
				"title": "Heap Dump",
				"category": "Troubleshoot Language Server"
			},
			{
				"command": "extension.graalvm.troubleshootNBLSCpuSampler",
				"title": "CPU Sampler",
				"category": "Troubleshoot Language Server"
			},
			{
				"command": "extension.graalvm.debugKubernetes",
				"title": "Debug (Attach using Java 8+)",
				"category": "GraalVM"
			},
			{
				"command": "extension.graalvm.heapReplay",
				"title": "Replay Heap Recording",
				"category": "GraalVM"
			}
		],
		"viewsContainers": {
			"activitybar": [
				{
					"id": "graalvm-explorer",
					"title": "GraalVM",
					"icon": "resources/graalvm.svg"
				}
			]
		},
		"viewsWelcome": [
			{
				"view": "graalvm-installations",
				"contents": "No GraalVM installation found.\n[Download & Install GraalVM](command:extension.graalvm.installGraalVM)\n[Add Existing GraalVM](command:extension.graalvm.addExistingGraalVM)"
			},
			{
				"view": "ni-control-panel",
				"contents": "Set active GraalVM installation to use Native Image."
			},
			{
				"view": "visualvm-control-panel",
				"contents": "Set active GraalVM installation to use VisualVM.",
				"when": "!extension.graalvm.remoteMode"
			},
			{
				"view": "visualvm-control-panel",
				"contents": "VisualVM integration not available for remote sessions.",
				"when": "extension.graalvm.remoteMode"
			}
		],
		"views": {
			"graalvm-explorer": [
				{
					"id": "graalvm-installations",
					"name": "Installations",
					"icon": "resources/graalvm.svg",
					"contextualTitle": "GraalVM Installations"
				},
				{
					"id": "ni-control-panel",
					"name": "Native Image",
					"icon": "resources/graalvm.svg",
					"contextualTitle": "Native Image",
					"when": "nativeImageInitialized"
				},
				{
					"id": "visualvm-control-panel",
					"name": "VisualVM",
					"icon": "resources/graalvm.svg",
					"contextualTitle": "VisualVM"
				}
			]
		},
		"menus": {
			"commandPalette": [
				{
					"command": "extension.graalvm.runVisualVMForPID",
					"when": "!extension.graalvm.remoteMode"
				},
				{
					"command": "extension.graalvm.startVisualVM",
					"when": "!extension.graalvm.remoteMode"
				},
				{
					"command": "extension.graalvm.toggleHandleProjectProcessVisualVM",
					"when": "false"
				},
				{
					"command": "extension.graalvm.toggleHandleProjectProcessVisualVM_",
					"when": "false"
				},
				{
					"command": "extension.graalvm.preselectOverviewVisualVM",
					"when": "false"
				},
				{
					"command": "extension.graalvm.preselectOverviewVisualVM_",
					"when": "false"
				},
				{
					"command": "extension.graalvm.preselectMonitorVisualVM",
					"when": "false"
				},
				{
					"command": "extension.graalvm.preselectMonitorVisualVM_",
					"when": "false"
				},
				{
					"command": "extension.graalvm.preselectThreadsVisualVM",
					"when": "false"
				},
				{
					"command": "extension.graalvm.preselectThreadsVisualVM_",
					"when": "false"
				},
				{
					"command": "extension.graalvm.preselectSamplerVisualVM",
					"when": "false"
				},
				{
					"command": "extension.graalvm.preselectSamplerVisualVM_",
					"when": "false"
				},
				{
					"command": "extension.graalvm.toggleWindowToFrontVisualVM",
					"when": "false"
				},
				{
					"command": "extension.graalvm.toggleWindowToFrontVisualVM_",
					"when": "false"
				},
				{
					"command": "extension.graalvm.toggleSourcesIntegrationVisualVM",
					"when": "false"
				},
				{
					"command": "extension.graalvm.toggleSourcesIntegrationVisualVM_",
					"when": "false"
				},
				{
					"command": "extension.graalvm.selectProcessVisualVM",
					"when": "false"
				},
				{
					"command": "extension.graalvm.threadDumpVisualVM",
					"when": "visualvm.featureSet >= 2"
				},
				{
					"command": "extension.graalvm.heapDumpVisualVM",
					"when": "visualvm.featureSet >= 2"
				},
				{
					"command": "extension.graalvm.startCPUSamplerVisualVM",
					"when": "visualvm.featureSet >= 2"
				},
				{
					"command": "extension.graalvm.startMemorySamplerVisualVM",
					"when": "visualvm.featureSet >= 2"
				},
				{
					"command": "extension.graalvm.snapshotSamplerVisualVM",
					"when": "false"
				},
				{
					"command": "extension.graalvm.stopSamplerVisualVM",
					"when": "false"
				},
				{
					"command": "extension.graalvm.startJFRRecordingVisualVM",
					"when": "visualvm.featureSet >= 2"
				},
				{
					"command": "extension.graalvm.dumpJFRRecordingVisualVM",
					"when": "false"
				},
				{
					"command": "extension.graalvm.stopJFRRecordingVisualVM",
					"when": "false"
				},
				{
					"command": "extension.graalvm.configureSettingVisualVM",
					"when": "false"
				},
				{
					"command": "extension.graalvm.openWindowsNITerminal",
					"when": "isWindows"
				},
				{
					"command": "extension.graalvm.showDocsNativeImage",
					"when": "false"
				},
				{
					"command": "extension.graalvm.configureSettingNativeImage",
					"when": "false"
				},
				{
					"command": "extension.graalvm.openConfigNativeImage",
					"when": "false"
				},
				{
					"command": "extension.graalvm.debugKubernetes",
					"when": "false"
				}
			],
			"editor/context": [
				{
					"command": "extension.graalvm.toggleCodeCoverage",
					"group": "4_coverage"
				}
			],
			"explorer/context": [
				{
					"command": "extension.graalvm.heapReplay",
					"when": "resourceExtname == .hprof",
					"group": "navigation"
				}
			],
			"view/title": [
				{
					"command": "extension.graalvm.installGraalVM",
					"when": "view == graalvm-installations",
					"group": "navigation@1"
				},
				{
					"command": "extension.graalvm.addExistingGraalVM",
					"when": "view == graalvm-installations",
					"group": "navigation@2"
				},
				{
					"command": "extension.graalvm.refreshInstallations",
					"when": "view == graalvm-installations",
					"group": "navigation@3"
				},
				{
					"command": "extension.graalvm.startVisualVM",
					"when": "view == visualvm-control-panel && visualvm.featureSet >= 1",
					"group": "navigation@1"
				},
				{
					"command": "extension.graalvm.toggleHandleProjectProcessVisualVM",
					"when": "view == visualvm-control-panel && !visualvm.handleProjectProcess && visualvm.featureSet >= 1",
					"group": "vcp_group_0@1"
				},
				{
					"command": "extension.graalvm.toggleHandleProjectProcessVisualVM_",
					"when": "view == visualvm-control-panel && visualvm.handleProjectProcess && visualvm.featureSet >= 1",
					"group": "vcp_group_0@1"
				},
				{
					"command": "extension.graalvm.preselectOverviewVisualVM",
					"when": "view == visualvm-control-panel && visualvm.preselectView != 1 && visualvm.featureSet >= 1",
					"group": "vcp_group_1@1"
				},
				{
					"command": "extension.graalvm.preselectOverviewVisualVM_",
					"when": "view == visualvm-control-panel && visualvm.preselectView == 1 && visualvm.featureSet >= 1",
					"group": "vcp_group_1@1"
				},
				{
					"command": "extension.graalvm.preselectMonitorVisualVM",
					"when": "view == visualvm-control-panel && visualvm.preselectView != 2 && visualvm.featureSet >= 1",
					"group": "vcp_group_1@2"
				},
				{
					"command": "extension.graalvm.preselectMonitorVisualVM_",
					"when": "view == visualvm-control-panel && visualvm.preselectView == 2 && visualvm.featureSet >= 1",
					"group": "vcp_group_1@2"
				},
				{
					"command": "extension.graalvm.preselectThreadsVisualVM",
					"when": "view == visualvm-control-panel && visualvm.preselectView != 3 && visualvm.featureSet >= 1",
					"group": "vcp_group_1@3"
				},
				{
					"command": "extension.graalvm.preselectThreadsVisualVM_",
					"when": "view == visualvm-control-panel && visualvm.preselectView == 3 && visualvm.featureSet >= 1",
					"group": "vcp_group_1@3"
				},
				{
					"command": "extension.graalvm.preselectSamplerVisualVM",
					"when": "view == visualvm-control-panel && visualvm.preselectView != 4 && visualvm.featureSet >= 1",
					"group": "vcp_group_1@4"
				},
				{
					"command": "extension.graalvm.preselectSamplerVisualVM_",
					"when": "view == visualvm-control-panel && visualvm.preselectView == 4 && visualvm.featureSet >= 1",
					"group": "vcp_group_1@4"
				},
				{
					"command": "extension.graalvm.toggleWindowToFrontVisualVM",
					"when": "view == visualvm-control-panel && !visualvm.windowToFront && visualvm.featureSet >= 2",
					"group": "vcp_group_2@1"
				},
				{
					"command": "extension.graalvm.toggleWindowToFrontVisualVM_",
					"when": "view == visualvm-control-panel && visualvm.windowToFront && visualvm.featureSet >= 2",
					"group": "vcp_group_2@2"
				},
				{
					"command": "extension.graalvm.toggleSourcesIntegrationVisualVM",
					"when": "view == visualvm-control-panel && visualvm.projectOpen && visualvm.sourcesIntegration && visualvm.featureSet >= 2",
					"group": "vcp_group_3@1"
				},
				{
					"command": "extension.graalvm.toggleSourcesIntegrationVisualVM_",
					"when": "view == visualvm-control-panel && visualvm.projectOpen && !visualvm.sourcesIntegration && visualvm.featureSet >= 2",
					"group": "vcp_group_3@2"
				},
				{
					"command": "extension.graalvm.openWindowsNITerminal",
					"when": "view == ni-control-panel && isWindows",
					"group": "navigation@1"
				}
			],
			"view/item/context": [
				{
					"command": "extension.graalvm.selectGraalVMHome",
					"when": "view == graalvm-installations && viewItem == graalvmInstallation || viewItem == graalvmInstallationOut || viewItem == graalvmInstallationActive",
					"group": "inline@1"
				},
				{
					"command": "extension.graalvm.installGraalVMComponent",
					"when": "view == graalvm-installations && viewItem == graalvmComponent",
					"group": "inline"
				},
				{
					"command": "extension.graalvm.uninstallGraalVMComponent",
					"when": "view == graalvm-installations && viewItem == graalvmComponentInstalled",
					"group": "inline"
				},
				{
					"command": "extension.graalvm.setupProxy",
					"when": "view == graalvm-installations && viewItem == graalvmConnectionError",
					"group": "inline"
				},
				{
					"command": "extension.graalvm.removeInstallation",
					"when": "view == graalvm-installations && viewItem == graalvmInstallation || viewItem == graalvmInstallationActive",
					"group": "inline@2"
				},
				{
					"command": "extension.graalvm.selectProcessVisualVM",
					"when": "view == visualvm-control-panel && viewItem == visualvm.process",
					"group": "inline@1"
				},
				{
					"command": "extension.graalvm.threadDumpVisualVM",
					"when": "view == visualvm-control-panel && viewItem == visualvm.threadDump",
					"group": "inline@1"
				},
				{
					"command": "extension.graalvm.heapDumpVisualVM",
					"when": "view == visualvm-control-panel && viewItem == visualvm.heapDump",
					"group": "inline@1"
				},
				{
					"command": "extension.graalvm.startCPUSamplerVisualVM",
					"when": "view == visualvm-control-panel && viewItem == visualvm.cpuSampler",
					"group": "inline@1"
				},
				{
					"command": "extension.graalvm.startMemorySamplerVisualVM",
					"when": "view == visualvm-control-panel && viewItem == visualvm.memorySampler",
					"group": "inline@1"
				},
				{
					"command": "extension.graalvm.snapshotSamplerVisualVM",
					"when": "view == visualvm-control-panel && viewItem == visualvm.cpuSampler || viewItem == visualvm.memorySampler",
					"group": "inline@2"
				},
				{
					"command": "extension.graalvm.stopSamplerVisualVM",
					"when": "view == visualvm-control-panel && viewItem == visualvm.cpuSampler || viewItem == visualvm.memorySampler",
					"group": "inline@3"
				},
				{
					"command": "extension.graalvm.startJFRRecordingVisualVM",
					"when": "view == visualvm-control-panel && viewItem == visualvm.jfr",
					"group": "inline@1"
				},
				{
					"command": "extension.graalvm.dumpJFRRecordingVisualVM",
					"when": "view == visualvm-control-panel && viewItem == visualvm.jfr",
					"group": "inline@2"
				},
				{
					"command": "extension.graalvm.stopJFRRecordingVisualVM",
					"when": "view == visualvm-control-panel && viewItem == visualvm.jfr",
					"group": "inline@3"
				},
				{
					"command": "extension.graalvm.configureSettingVisualVM",
					"when": "view == visualvm-control-panel && viewItem == visualvm.configure",
					"group": "inline@1"
				},
				{
					"command": "extension.graalvm.showDocsNativeImage",
					"when": "view == ni-control-panel && viewItem == nativeimage.agent",
					"group": "inline@1"
				},
				{
					"command": "extension.graalvm.openConfigNativeImage",
					"when": "view == ni-control-panel && viewItem == nativeimage.outputDir",
					"group": "inline@1"
				},
				{
					"command": "extension.graalvm.configureSettingNativeImage",
					"when": "view == ni-control-panel && viewItem == nativeimage.configure",
					"group": "inline@1"
				},
				{
					"command": "extension.graalvm.configureSettingNativeImage",
					"when": "view == ni-control-panel && viewItem == nativeimage.outputDir",
					"group": "inline@2"
				},
				{
					"command": "extension.graalvm.debugKubernetes",
					"group": "2@5",
					"when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.pod/i"
				}
			]
		},
		"languages": [
			{
				"id": "sl",
				"aliases": [
					"SL",
					"SimpleLanguage",
					"Simple-Language"
				],
				"extensions": [
					".sl"
				],
				"configuration": "./sl-language-configuration.json"
			}
		],
		"grammars": [
			{
				"language": "sl",
				"scopeName": "source.sl",
				"path": "./syntaxes/sl.tmLanguage.json"
			},
			{
				"path": "./syntaxes/js-polyglot-injection.json",
				"injectTo": [
					"source.js",
					"source.r",
					"source.ruby",
					"source.python",
					"source.sl"
				],
				"scopeName": "js.inline.polyglot-languages",
				"embeddedLanguages": {
					"meta.embedded.inline.python": "python",
					"meta.embedded.inline.r": "r",
					"meta.embedded.inline.ruby": "ruby",
					"meta.embedded.inline.sl": "sl"
				}
			},
			{
				"path": "./syntaxes/sl-polyglot-injection.json",
				"injectTo": [
					"source.sl",
					"source.js",
					"source.r",
					"source.ruby",
					"source.python"
				],
				"scopeName": "sl.inline.polyglot-languages",
				"embeddedLanguages": {
					"meta.embedded.inline.js": "js",
					"meta.embedded.inline.python": "python",
					"meta.embedded.inline.r": "r",
					"meta.embedded.inline.ruby": "ruby"
				}
			},
			{
				"path": "./syntaxes/python-polyglot-injection.json",
				"injectTo": [
					"source.python",
					"source.js",
					"source.r",
					"source.ruby",
					"source.sl"
				],
				"scopeName": "python-inline.polyglot-languages",
				"embeddedLanguages": {
					"meta.embedded.inline.js": "javascript",
					"meta.embedded.inline.r": "r",
					"meta.embedded.inline.ruby": "ruby",
					"meta.embedded.inline.sl": "sl"
				}
			},
			{
				"path": "./syntaxes/r-polyglot-injection.json",
				"injectTo": [
					"source.r",
					"source.js",
					"source.ruby",
					"source.python",
					"source.sl"
				],
				"scopeName": "r-inline.polyglot-languages",
				"embeddedLanguages": {
					"meta.embedded.inline.js": "javascript",
					"meta.embedded.inline.python": "python",
					"meta.embedded.inline.ruby": "ruby",
					"meta.embedded.inline.sl": "sl"
				}
			},
			{
				"path": "./syntaxes/ruby-polyglot-injection.json",
				"injectTo": [
					"source.ruby",
					"source.js",
					"source.r",
					"source.python",
					"source.sl"
				],
				"scopeName": "ruby-inline.polyglot-languages",
				"embeddedLanguages": {
					"meta.embedded.inline.js": "javascript",
					"meta.embedded.inline.python": "python",
					"meta.embedded.inline.r": "r",
					"meta.embedded.inline.sl": "sl"
				}
			}
		],
		"snippets": [
			{
				"language": "javascript",
				"path": "./snippets/js-polyglot-snippets.json"
			},
			{
				"language": "sl",
				"path": "./snippets/sl-polyglot-snippets.json"
			},
			{
				"language": "python",
				"path": "./snippets/python-polyglot-snippets.json"
			},
			{
				"language": "r",
				"path": "./snippets/r-polyglot-snippets.json"
			},
			{
				"language": "ruby",
				"path": "./snippets/ruby-polyglot-snippets.json"
			}
		],
		"breakpoints": [
			{
				"language": "javascript"
			},
			{
				"language": "typescript"
			},
			{
				"language": "python"
			},
			{
				"language": "r"
			},
			{
				"language": "ruby"
			}
		],
		"debuggers": [
			{
				"type": "graalvm",
				"label": "GraalVM",
				"languages": [
					"javascript",
					"typescript",
					"python",
					"r",
					"ruby"
				],
				"program": "./dist/debug",
				"runtime": "node",
				"configurationAttributes": {
					"launch": {
						"properties": {
							"program": {
								"type": "string",
								"description": "Absolute path to the program."
							},
							"args": {
								"type": "array",
								"description": "Command line arguments passed to the program.",
								"items": {
									"type": "string"
								},
								"default": []
							},
							"console": {
								"enum": [
									"internalConsole",
									"integratedTerminal"
								],
								"description": "Where to launch the debug target: internal console, or integrated terminal.",
								"default": "internalConsole"
							},
							"outputCapture": {
								"enum": [
									"console",
									"std"
								],
								"description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
								"default": "console"
							},
							"cwd": {
								"type": "string",
								"description": "Absolute path to the working directory of the program being debugged.",
								"default": "${workspaceFolder}"
							},
							"runtimeExecutable": {
								"type": [
									"string",
									"null"
								],
								"markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available in GraalVM `bin` directory. If omitted `node` is assumed.",
								"default": null
							},
							"runtimeArgs": {
								"type": "array",
								"description": "Optional arguments passed to the runtime executable.",
								"items": {
									"type": "string"
								},
								"default": []
							},
							"port": {
								"type": "number",
								"description": "Debug port to attach to. Default is 9229.",
								"default": 9229
							},
							"address": {
								"type": "string",
								"description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
								"default": "localhost"
							},
							"timeout": {
								"type": "number",
								"description": "Retry for this number of milliseconds to connect to GraalVM. Default is 10000 ms.",
								"default": 10000
							},
							"protocol": {
								"enum": [
									"chromeDevTools",
									"debugAdapter"
								],
								"description": "Protocol used to connect the debug target: Debug Adapter Protocol, or Chrome DevTools Protocol.",
								"default": "chromeDevTools"
							}
						}
					},
					"attach": {
						"properties": {
							"port": {
								"type": "number",
								"description": "Debug port to attach to. Default is 9229.",
								"default": 9229
							},
							"address": {
								"type": "string",
								"description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
								"default": "localhost"
							},
							"timeout": {
								"type": "number",
								"description": "Retry for this number of milliseconds to connect to GraalVM. Default is 10000 ms.",
								"default": 10000
							},
							"protocol": {
								"enum": [
									"chromeDevTools",
									"debugAdapter"
								],
								"description": "Protocol used to connect the debug target: Debug Adapter Protocol, or Chrome DevTools Protocol.",
								"default": "chromeDevTools"
							},
							"localRoot": {
								"type": [
									"string",
									"null"
								],
								"description": "Path to the local directory containing the program.",
								"default": null
							},
							"remoteRoot": {
								"type": [
									"string",
									"null"
								],
								"description": "Absolute path to the remote directory containing the program.",
								"default": null
							}
						}
					}
				},
				"configurationSnippets": [
					{
						"label": "GraalVM: Launch Node.js Application",
						"description": "Launch a Node.js Application in debug mode",
						"body": {
							"type": "graalvm",
							"request": "launch",
							"name": "Launch Node App",
							"outputCapture": "std",
							"program": "^\"\\${workspaceFolder}/${1:app.js}\""
						}
					},
					{
						"label": "GraalVM: Launch JavaScript",
						"description": "Launch a JavaScript in debug mode",
						"body": {
							"type": "graalvm",
							"request": "launch",
							"name": "Launch JavaScript",
							"runtimeExecutable": "js",
							"program": "^\"${1:\\${file\\}}\""
						}
					},
					{
						"label": "GraalVM: Launch Polyglot Application",
						"description": "Launch a Polyglot Application in debug mode",
						"body": {
							"type": "graalvm",
							"request": "launch",
							"name": "Launch Polyglot App",
							"runtimeExecutable": "polyglot",
							"program": "^\"${1:\\${file\\}}\""
						}
					},
					{
						"label": "GraalVM: Launch Python Script",
						"description": "Launch a Python Script in debug mode",
						"body": {
							"type": "graalvm",
							"request": "launch",
							"name": "Launch Python Script",
							"runtimeExecutable": "graalpython",
							"program": "^\"${1:\\${file\\}}\""
						}
					},
					{
						"label": "GraalVM: Launch R Script",
						"description": "Launch an R Script in debug mode",
						"body": {
							"type": "graalvm",
							"request": "launch",
							"name": "Launch R Script",
							"runtimeExecutable": "Rscript",
							"program": "^\"${1:\\${file\\}}\""
						}
					},
					{
						"label": "GraalVM: Launch R Terminal",
						"description": "Launch an R terminal in debug mode",
						"body": {
							"type": "graalvm",
							"request": "launch",
							"name": "Launch R Term",
							"runtimeExecutable": "R",
							"console": "integratedTerminal"
						}
					},
					{
						"label": "GraalVM: Launch Ruby Script",
						"description": "Launch a Ruby Script in debug mode",
						"body": {
							"type": "graalvm",
							"request": "launch",
							"name": "Launch Ruby Script",
							"runtimeExecutable": "ruby",
							"program": "^\"${1:\\${file\\}}\""
						}
					},
					{
						"label": "GraalVM: Attach",
						"description": "Attach to a running GraalVM",
						"body": {
							"type": "graalvm",
							"request": "attach",
							"name": "Attach",
							"port": 9229
						}
					},
					{
						"label": "GraalVM: Attach to Remote",
						"description": "Attach to the debug port of a remote GraalVM",
						"body": {
							"type": "graalvm",
							"request": "attach",
							"name": "Attach to Remote",
							"address": "${1:TCP/IP address of process to be debugged}",
							"port": 9229,
							"localRoot": "${workspaceFolder}",
							"remoteRoot": "${2:Absolute path to the remote directory containing the program}"
						}
					}
				]
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "webpack --mode production",
		"compile": "tsc -p ./",
		"webpack": "webpack --mode development",
		"info": "webpack --display-modules",
		"watch": "webpack --mode development --watch",
		"lint": "tslint -p ./"
	},
	"dependencies": {
		"copy-webpack-plugin": "^10.2.4",
		"decompress": "4.2.1",
		"maven": "^5.0.0",
		"mustache": "4.0.1",
		"sax": "^1.2.4",
		"vscode-chrome-debug-core": "^6.8.8",
		"vscode-kubernetes-tools-api": "^1.0.0",
		"vscode-languageclient": "^5.2.1",
		"xml2js": "^0.4.23"
	},
	"devDependencies": {
		"@types/decompress": "^4.2.3",
		"@types/mustache": "^4.0.1",
		"@types/node": "^12.12.30",
		"@types/sax": "^1.2.1",
		"@types/vscode": "^1.49.0",
		"@types/xml2js": "^0.4.8",
		"ts-loader": "^6.2.1",
		"tslint": "^6.1.0",
		"typescript": "^3.8.3",
		"webpack": "^5.40.0",
		"webpack-cli": "^4.7.2"
	},
    "extensionDependencies": [
      "asf.apache-netbeans-java"
    ]
}
